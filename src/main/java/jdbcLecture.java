//import com.mysql.jdbc.Driver;
//
//import java.sql.*;
//
//public class jdbcLecture {
//    public static void main(String[] args) throws SQLException {
//        Config config = new Config();
////        instantiate MySQL Driver to register to the built in Java Driver Manager
////        this SQL Package already built into Java. The Driver lets us to work specifically with MySQL. Included in the pom file as dependency
//        DriverManager.registerDriver(new Driver());
//
////Connect to the db by providing the URL, user, and the password of the user to connect as.
//        Connection connection = DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());
//
////        Create a statement object to submit and execute queries
//        Statement stat = connection.createStatement();
//
////        Now we can use Statement object to make our queries
//
////        execute method returns a boolean indicating success
////        stat.execute("DELETE FROM albums WHERE id = 4");
//
////        returns the number of rows affected. This would return 1
////        stat.executeUpdate("INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Pop, Urban, R&B', 12.5)");
//
////        returns a ResultSet object (object able to interate thru to view results)
////        stat.executeQuery("SELECT * FROM albums");
//
////        handling results with resultSet object:
//        String selectQuery = "SELECT * FROM albums";
//        ResultSet rs = stat.executeQuery(selectQuery);
//
////        By calling the .next() method we can interate over the rows.
////        Method will return true as long as there are rows left in our results.
////        Most common way to handle the results is to use while loop
//
//        while (rs.next()) {
////            do something with each row
//            System.out.println("Here is an album: ");
////            get data type of column, then the name of the column
//            System.out.println(" id: " + rs.getLong("id"));
//            System.out.println(" Artist: " + rs.getString("artist"));
//            System.out.println(" Album: " + rs.getString("name"));
//        }
//
//
////        INSERT query
//        String insertQuery = "INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Pop, Urban, R&B', 12.5)";
//
////        For executeUpdate method, can have two arguments:
////        1. the Query String
////        2. (not required) constant from the Statement Object.
////        This constant gives us access to the id's that are auto generated by the db
//
////        Static constant from Statement class
//        stat.executeUpdate(insertQuery, Statement.RETURN_GENERATED_KEYS);
//
////        to access the id's use the getGeneratedKeys() method on the ResultSet object which will hold any id's generated by the db.
//        ResultSet rsKeys = stat.getGeneratedKeys();
//
//        if (rsKeys.next()){
//            System.out.println("inserted a new record. The new record id is:" + rsKeys.getLong(1));
//        }
//
//
//    }
//
//}
